{"version":3,"file":"static/js/765.2b47a1f9.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.js","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.js","pages/MoviesPage.js","services/api.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledMovieCard = styled(Link)`\n  display: block;\n  text-decoration: none;\n  height: 100%;\n  border: 1px solid blue;\n  border-radius: 10px;\n  overflow: hidden;\n  background-color: #282c34;\n  color: #b2b3f6;\n  box-shadow: 5px 5px 5px #282c34;\n  transition: all 0.2s ease-in-out;\n  &:hover {\n    transform: scale(1.05);\n    box-shadow: 10px 10px 10px #282c34;\n  }\n`;\n\nexport const StyledImage = styled.img`\n  width: 100%;\n  height: 100%;\nobject-fit: cover;`;\n\nexport const ImageWrapper = styled.div`\n  display: block;\n  height: 300px;\n`;\n\nexport const ContentWrapper = styled.div`\n  padding: 15px;\n  p:first-child {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Rating = styled.span`\n  padding: 5px;\n  background-color: ${({ rating }) => {\n    if (rating > 6) {\n      return '#6c3';\n    }\n    if (rating >= 4 && rating <= 6) {\n      return '#fc3';\n    }\n    return '#f00';\n  }};\n  border-radius: 10px;\n  color: ${({ rating }) => (rating >= 4 && rating <= 6 ? 'black' : 'white')};\n`;","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\n\nimport { Box } from 'utils/Box';\n\nimport {\n  StyledMovieCard,\n  Rating,\n  ContentWrapper,\n  ImageWrapper,\n  StyledImage,\n} from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <Box\n        as=\"ul\"\n        display=\"grid\"\n        gridTemplateColumns=\"repeat(5, 1fr)\"\n        gridGap=\"20px\"\n        gridAutoRows=\"auto\"\n      >\n        {movies.map(({ id, title, poster, vote_average }) => (\n          <li key={id}>\n            <StyledMovieCard to={`/movies/${id}`} state={{ from: location }}>\n              <ImageWrapper>\n                <StyledImage src={poster} alt={title} />\n              </ImageWrapper>\n              <ContentWrapper>\n                <p>\n                  <b>{title}</b>\n                </p>\n                <p>\n                  <b>Rating: </b>\n                  <Rating rating={vote_average.toFixed(2)}>\n                    {vote_average.toFixed(2)}\n                  </Rating>\n                </p>\n              </ContentWrapper>\n            </StyledMovieCard>\n          </li>\n        ))}\n      </Box>\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      vote_average: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n","import styled from 'styled-components';\n\n\nexport const StyledSearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 10px;\n  overflow: hidden;\n`;\n\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  :hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 14px;\n  padding-right: 14px;\n  color: #1e489c;\n  font-weight: 500;\n  ::placeholder {\n    font: inherit;\n    font-size: 18px;\n    color: #9c9efc\n  }\n`;","import PropTypes from 'prop-types';\nimport {\n  StyledSearchForm,\n  SearchFormButton,\n  SearchFormInput,\n} from './SearchForm.styled';\nimport { FcSearch } from 'react-icons/fc';\nimport { Box } from 'utils/Box';\n\nimport { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { getFetchSearchMovies } from 'services/api';\n\nexport const SearchForm = ({ setSearchMovies }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const handleSubmitSearchMovies = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const query = form.elements.search.value;\n\n    setSearchParams({ query });\n\n    form.reset();\n  };\n\n  useEffect(() => {\n    if (!query) return;\n\n    async function fetchAwaiter() {\n      const allDataMovies = await getFetchSearchMovies(query);\n\n      const requiredDataMovies = allDataMovies.map(\n        ({ id, title, poster_path: poster, vote_average }) => ({\n          id,\n          title,\n          poster: 'https://image.tmdb.org/t/p/w500' + poster,\n          vote_average,\n        })\n      );\n\n      setSearchMovies(requiredDataMovies);\n    }\n\n    fetchAwaiter();\n  }, [query, setSearchMovies]);\n\n  return (\n    <Box display=\"flex\" justifyContent=\"center\" mb=\"30px\">\n      <StyledSearchForm onSubmit={handleSubmitSearchMovies}>\n        <SearchFormInput\n          type=\"text\"\n          name=\"search\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n        <SearchFormButton type=\"submit\">\n          <FcSearch size={32} />\n        </SearchFormButton>\n      </StyledSearchForm>\n    </Box>\n  );\n};\n\nSearchForm.propTypes = {\n  setSearchMovies: PropTypes.func.isRequired,\n};\n","import { useState } from 'react';\n\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\n\nimport { Box } from 'utils/Box';\n\nconst MoviesPage = () => {\n  const [searchMovies, setSearchMovies] = useState([]);\n\n  return (\n    <Box p=\"30px 0\">\n      <SearchForm setSearchMovies={setSearchMovies} />\n\n      {searchMovies && <MoviesList movies={searchMovies} />}\n    </Box>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = '6f3a72a470b06bab99f8d69f54b4e2d3';\n\nexport const getFetchTrending = async () => {\n  const response = await axios('/trending/movie/day', {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const getFetchSearchMovies = async query => {\n  const response = await axios('/search/movie', {\n    params: {\n      api_key: KEY,\n      include_adult: false,\n      query,\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const getFetchMovieDetails = async movieId => {\n  const response = await axios(`/movie/${movieId}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return response.data;\n};\n\nexport const getFetchMovieCast = async movieId => {\n  const response = await axios(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return response.data;\n};\n\nexport const getFetchMovieReviews = async movieId => {\n  const response = await axios(`/movie/${movieId}/reviews`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return response.data;\n};\n"],"names":["StyledMovieCard","styled","Link","StyledImage","ImageWrapper","ContentWrapper","Rating","rating","MoviesList","movies","location","useLocation","Box","as","display","gridTemplateColumns","gridGap","gridAutoRows","map","id","title","poster","vote_average","to","state","from","src","alt","toFixed","StyledSearchForm","SearchFormButton","SearchFormInput","SearchForm","setSearchMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","getFetchSearchMovies","allDataMovies","requiredDataMovies","poster_path","fetchAwaiter","justifyContent","mb","onSubmit","e","preventDefault","form","currentTarget","elements","search","value","reset","type","name","autoComplete","autoFocus","placeholder","size","useState","searchMovies","p","axios","KEY","getFetchTrending","params","api_key","response","data","results","include_adult","getFetchMovieDetails","movieId","getFetchMovieCast","getFetchMovieReviews"],"sourceRoot":""}